// components/ChatApp.js
class ChatApp {
    constructor(containerId) {
        this.container = document.getElementById(containerId);
        if (!this.container) {
            console.error('‚ùå ChatApp container not found:', containerId);
            return;
        }

        this.Gemini_API_Key = 'AIzaSyAKjJyQ4P8PslMaCWwqkm4BSjHtKNpWw'; // L·∫•y API key t·ª´ bi·∫øn to√†n c·ª•c n·∫øu c√≥
        
        this.isOpen = false;
        
        // Kh·ªüi t·∫°o c√°c components con
        this.chatHeader = new ChatHeader('chat-header');
        this.messageList = new MessageList('message-list');
        this.inputBar = new InputBar('input-bar', this.handleSendMessage.bind(this));
        
        this.faqClickListenerAdded = false; // Th√™m c·ªù
    }

    init() {
        console.log('üöÄ Initializing ChatApp...');
        this.render();
        this.connectToSearchBar();

        // T·∫£i FAQs ngay khi kh·ªüi t·∫°o
        window.useFaqData.loadFaqs(); 

        setTimeout(() => {
            this.addBotMessage("Hello! I'm UniFAQ Assistant. How can I help you today?");
        }, 500);
    }

    render() {
        // Render c·∫•u tr√∫c HTML ch√≠nh c·ªßa chat app
        this.container.innerHTML = `
            <div 
                class="chat-app ${this.isOpen ? 'chat-app--open' : 'chat-app--closed'}"
                style="position: fixed; bottom: 20px; right: 20px; z-index: 1000; width: 380px; height: 500px; background: white; border-radius: 12px; box-shadow: 0 10px 25px rgba(0,0,0,0.1); display: flex; flex-direction: column; overflow: hidden;"
            >
                <div id="chat-header"></div>
                <div id="message-list" style="flex: 1; overflow: hidden;"></div>
                <div id="input-bar"></div>
            </div>
            <button 
                class="chat-toggle" 
                id="chat-toggle"
                style="position: fixed; bottom: 20px; right: 20px; z-index: 999; width: 60px; height: 60px; border-radius: 50%; border: none; background: linear-gradient(135deg, #4b6cb7, #182848); color: white; font-size: 24px; cursor: pointer; box-shadow: 0 5px 15px rgba(0,0,0,0.2); display: flex; align-items: center; justify-content: center;"
            >
                <i class="fas fa-comments"></i>
                <span class="chat-toggle__badge" id="chat-notification" style="display: none; position: absolute; top: -5px; right: -5px; background: #ff7a18; color: white; border-radius: 50%; width: 20px; height: 20px; font-size: 12px; font-weight: bold; line-height: 20px; text-align: center;">!</span>
            </button>
        `;
        
        // N·∫øu c·ª≠a s·ªï chat ƒëang m·ªü, render c√°c component con
        if (this.isOpen) {
            this.chatHeader.render();
            this.messageList.render();
            this.inputBar.render();
            this.inputBar.focus();
        }

        // G·∫Øn s·ª± ki·ªán cho c√°c n√∫t
        this.attachEvents();
    }

    attachEvents() {
        const toggleBtn = document.getElementById('chat-toggle');
        if (toggleBtn) {
            toggleBtn.addEventListener('click', () => {
                this.toggleChat();
                this.hideNotification();
            });
        }

        // Ch·ªâ g·∫Øn s·ª± ki·ªán ƒë√≥ng khi c·ª≠a s·ªï chat ƒëang m·ªü
        if (this.isOpen) {
            const closeBtn = document.querySelector('.chat-header__actions .chat-header__btn:last-child');
            if (closeBtn) {
                closeBtn.addEventListener('click', () => this.closeChat());
            }
            const minimizeBtn = document.querySelector('.chat-header__actions .chat-header__btn:first-child');
             if (minimizeBtn) {
                minimizeBtn.addEventListener('click', () => this.closeChat());
            }
        }
        
        // Th√™m listener ƒë·ªÉ x·ª≠ l√Ω click v√†o c√¢u h·ªèi FAQ (ch·ªâ 1 l·∫ßn)
        if (!this.faqClickListenerAdded) {
            this.container.addEventListener('click', (e) => {
                const faqItem = e.target.closest('.message__faq-item');
                if (faqItem && faqItem.dataset.question) {
                    e.preventDefault();
                    this.handleSendMessage(faqItem.dataset.question);
                }
            });
            this.faqClickListenerAdded = true;
        }
    }

    toggleChat() {
        this.isOpen = !this.isOpen;
        this.render(); // Re-render ƒë·ªÉ c·∫≠p nh·∫≠t class v√† c√°c components con
    }

    openChat() {
        if (!this.isOpen) {
            this.isOpen = true;
            this.render();
        }
    }

    closeChat() {
        if (this.isOpen) {
            this.isOpen = false;
            this.render();
        }
    }
    
    connectToSearchBar() {
        const searchInput = document.querySelector('.header__search-input');
        const searchButton = document.querySelector('.header__search-btn');

        if (searchInput && searchButton) {
            const sendQuery = () => {
                const query = searchInput.value.trim();
                if (query) {
                    this.openChat();
                    setTimeout(() => this.handleSendMessage(query), 200);
                    searchInput.value = '';
                }
            };
            searchButton.addEventListener('click', sendQuery);
            searchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') sendQuery();
            });
            console.log('‚úÖ Search bar connected to chat');
        }
    }

    // --- B·∫ÆT ƒê·∫¶U H√ÄM QUAN TR·ªåNG (V·ªöI G·ª† L·ªñI) ---
    async handleSendMessage(message) {
    if (!message.trim()) return;
    this.messageList.addMessage(message, true); 
    this.inputBar.setLoading(true);

    const allFaqs = await window.useFaqData.getFaqs();
    const normalize = window.useFaqSearch.normalizeText; 
    const normalizedMessage = normalize(message);

    const exactMatch = allFaqs.find(f => normalize(f.question) === normalizedMessage); //

    if (exactMatch) {
        console.log('‚úÖ T√¨m th·∫•y K·∫æT QU·∫¢ CH√çNH X√ÅC:', exactMatch);
        setTimeout(() => {
            this.inputBar.setLoading(false);
            this.addBotMessage(exactMatch.answer); //
        }, 800);
    } else {
        console.log('‚ÑπÔ∏è Kh√¥ng kh·ªõp ch√≠nh x√°c. Th·ª≠ t√¨m b·∫±ng t·ª´ kh√≥a...');
        const topFaqs = window.useFaqSearch.findTopFaqs(message, allFaqs, 3);

        // --- S·ª¨A ƒê·ªîI CH·ªñ N√ÄY ---
        // Ch√∫ng ta c·∫ßn bi·∫øn h√†m setTimeout b√™n trong th√†nh async
        setTimeout(async () => { 
            if (topFaqs.length > 0) {
                this.inputBar.setLoading(false);
                this.messageList.addMessage({ type: 'faqList', faqs: topFaqs }, false);
            } else {
                console.log('‚ùå T√¨m t·ª´ kh√≥a th·∫•t b·∫°i. G·ªçi Gemini AI...');
                // Kh√¥ng g·ªçi generateFallbackResponse n·ªØa
                // Thay v√†o ƒë√≥, g·ªçi h√†m m·ªõi callGeminiAPI
                await this.callGeminiAPI(message); 
            }
        }, 1200);
        // --- K·∫æT TH√öC S·ª¨A ƒê·ªîI ---
    }
}
    // --- K·∫æT TH√öC H√ÄM QUAN TR·ªåNG ---

    addBotMessage(textOrData) {
        this.messageList.addMessage(textOrData, false);
        if (!this.isOpen) this.showNotification();
    }
    
    showNotification() {
        const notification = document.getElementById('chat-notification');
        if (notification) notification.style.display = 'block';
    }

    hideNotification() {
        const notification = document.getElementById('chat-notification');
        if (notification) notification.style.display = 'none';
    }

    // H√†m d·ª± ph√≤ng
    async callGeminiAPI(userMessage) {
    // B·∫≠t loading
    this.inputBar.setLoading(true); 
    
    // --- S·ª¨A L·ªñI URL V√Ä M√î H√åNH ---
    const MODEL_NAME = 'gemini-1.5-flash-latest'; // S·ª≠ d·ª•ng m√¥ h√¨nh m·ªõi nh·∫•t
    const API_VERSION = 'v1'; // S·ª≠ d·ª•ng v1, KH√îNG D√ôNG v1beta
    
    const API_URL = `https://generativelanguage.googleapis.com/${API_VERSION}/models/${MODEL_NAME}:generateContent?key=${this.GEMINI_API_KEY}`;
    // --- K·∫æT TH√öC S·ª¨A L·ªñI ---
    
    const prompt = `B·∫°n l√† tr·ª£ l√Ω ·∫£o cho m·ªôt tr∆∞·ªùng ƒë·∫°i h·ªçc t√™n l√† UniFAQ. 
                   Ng∆∞·ªùi d√πng ƒë√£ h·ªèi m·ªôt c√¢u nh∆∞ng kh√¥ng t√¨m th·∫•y trong c∆° s·ªü d·ªØ li·ªáu FAQ. 
                   H√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa h·ªç m·ªôt c√°ch ng·∫Øn g·ªçn, h·ªØu √≠ch.
                   C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: "${userMessage}"`;
    
    const requestBody = {
        contents: [{
            parts: [{
                text: prompt 
            }]
        }]
    };

    try {
        const response = await fetch(API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody),
        });

        const data = await response.json(); 

        if (!response.ok) {
            console.error('L·ªói API! Chi ti·∫øt t·ª´ Google:', data); 
            throw new Error(data.error?.message || `API request failed with status ${response.status}`);
        }
        
        // Ki·ªÉm tra xem c√≥ n·ªôi dung tr·∫£ v·ªÅ kh√¥ng
        if (!data.candidates || data.candidates.length === 0 || !data.candidates[0].content) {
            console.error('L·ªói API: Kh√¥ng c√≥ n·ªôi dung tr·∫£ v·ªÅ', data);
            throw new Error("AI kh√¥ng tr·∫£ v·ªÅ n·ªôi dung.");
        }

        const geminiResponse = data.candidates[0].content.parts[0].text;
        this.addBotMessage(geminiResponse);

    } catch (error) {
        console.error('‚ùå L·ªói g·ªçi Gemini API:', error);
        this.addBotMessage("T√¥i g·∫∑p s·ª± c·ªë khi k·∫øt n·ªëi v·ªõi tr·ª£ l√Ω AI. " + error.message);
    } finally {
        this.inputBar.setLoading(false); 
    }
}

    sendMessageFromExternal(text) {
        this.openChat();
        setTimeout(() => {
            this.handleSendMessage(text);
        }, 500);
    }
}