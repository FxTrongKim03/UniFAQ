// components/ChatApp.js
class ChatApp {
    constructor(containerId) {
        this.container = document.getElementById(containerId);
        if (!this.container) {
            console.error('‚ùå ChatApp container not found:', containerId);
            return;
        }

        // -----------------------------------------------------------------
        // C·∫¢NH B√ÅO B·∫¢O M·∫¨T NGHI√äM TR·ªåNG (SECURITY WARNING) ‚ö†Ô∏è
        // -----------------------------------------------------------------
        // Key n√†y ch·ªâ d√πng ƒë·ªÉ *th·ª≠ nghi·ªám* v√† s·∫Ω b·ªã l·ªô ngay l·∫≠p t·ª©c.
        // H√£y t·∫°o backend ƒë·ªÉ g·ªçi API an to√†n.
        // -----------------------------------------------------------------
        this.GEMINI_API_KEY = 'AIzaSyAPHtchMSvtKiJ4HAB8odibdBSQWU6mNsc'; // <-- L·ªñ H·ªîNG B·∫¢O M·∫¨T

        this.isOpen = false;
        
        // Kh·ªüi t·∫°o c√°c components con
        this.chatHeader = new ChatHeader('chat-header');
        this.messageList = new MessageList('message-list');
        
        // --- ƒê√É S·ª¨A: Truy·ªÅn th√™m callback m·ªõi ---
        this.inputBar = new InputBar(
            'input-bar', 
            this.handleSendMessage.bind(this),
            this.handleSearchSuggestions.bind(this) // Truy·ªÅn h√†m x·ª≠ l√Ω g·ª£i √Ω
        );
        
        this.faqClickListenerAdded = false;
    }

    init() {
        console.log('üöÄ Initializing ChatApp...');
        this.render();
        this.connectToSearchBar();
        window.useFaqData.loadFaqs(); 
        setTimeout(() => {
            this.addBotMessage("Hello! I'm UniFAQ Assistant. How can I help you today?");
        }, 500);
    }

    render() {
        // (H√†m render gi·ªØ nguy√™n nh∆∞ c≈©)
        this.container.innerHTML = `
            <div 
                class="chat-app ${this.isOpen ? 'chat-app--open' : 'chat-app--closed'}"
                style="position: fixed; bottom: 20px; right: 20px; z-index: 1000; width: 380px; height: 500px; background: white; border-radius: 12px; box-shadow: 0 10px 25px rgba(0,0,0,0.1); display: flex; flex-direction: column; overflow: hidden;"
            >
                <div id="chat-header"></div>
                <div id="message-list" style="flex: 1; overflow: hidden;"></div>
                <div id="input-bar"></div>
            </div>
            <button 
                class="chat-toggle" 
                id="chat-toggle"
                style="position: fixed; bottom: 20px; right: 20px; z-index: 999; width: 60px; height: 60px; border-radius: 50%; border: none; background: linear-gradient(135deg, #4b6cb7, #182848); color: white; font-size: 24px; cursor: pointer; box-shadow: 0 5px 15px rgba(0,0,0,0.2); display: flex; align-items: center; justify-content: center;"
            >
                <i class="fas fa-comments"></i>
                <span class="chat-toggle__badge" id="chat-notification" style="display: none; position: absolute; top: -5px; right: -5px; background: #ff7a18; color: white; border-radius: 50%; width: 20px; height: 20px; font-size: 12px; font-weight: bold; line-height: 20px; text-align: center;">!</span>
            </button>
        `;
        
        if (this.isOpen) {
            this.chatHeader.render();
            this.messageList.render();
            this.inputBar.render();
            this.inputBar.focus();
        }
        this.attachEvents();
    }

    attachEvents() {
        // (H√†m attachEvents gi·ªØ nguy√™n ph·∫ßn l·ªõn)
        const toggleBtn = document.getElementById('chat-toggle');
        if (toggleBtn) {
            toggleBtn.addEventListener('click', () => {
                this.toggleChat();
                this.hideNotification();
            });
        }
        
        if (this.isOpen) {
            const closeBtn = document.querySelector('.chat-header__actions .chat-header__btn:last-child');
            if (closeBtn) {
                closeBtn.addEventListener('click', () => this.closeChat());
            }
            const minimizeBtn = document.querySelector('.chat-header__actions .chat-header__btn:first-child');
             if (minimizeBtn) {
                minimizeBtn.addEventListener('click', () => this.closeChat());
            }
        }
        
        // (Listener n√†y v·∫´n c·∫ßn cho c√°c c√¢u h·ªèi g·ª£i √Ω TRONG L·ªäCH S·ª¨ CHAT)
        if (!this.faqClickListenerAdded) {
            this.container.addEventListener('click', (e) => {
                const faqItem = e.target.closest('.message__faq-item');
                if (faqItem && faqItem.dataset.question) {
                    e.preventDefault();
                    this.handleSendMessage(faqItem.dataset.question);
                }
            });
            this.faqClickListenerAdded = true;
        }
    }
    
    // (C√°c h√†m toggleChat, openChat, closeChat, connectToSearchBar gi·ªØ nguy√™n)
    toggleChat() {
        this.isOpen = !this.isOpen;
        this.render();
    }
    openChat() {
        if (!this.isOpen) {
            this.isOpen = true;
            this.render();
        }
    }
    closeChat() {
        if (this.isOpen) {
            this.isOpen = false;
            this.render();
        }
    }
    connectToSearchBar() {
        const searchInput = document.querySelector('.header__search-input');
        const searchButton = document.querySelector('.header__search-btn');
        if (searchInput && searchButton) {
            const sendQuery = () => {
                const query = searchInput.value.trim();
                if (query) {
                    this.openChat();
                    setTimeout(() => this.handleSendMessage(query), 200);
                    searchInput.value = '';
                }
            };
            searchButton.addEventListener('click', sendQuery);
            searchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') sendQuery();
            });
            console.log('‚úÖ Search bar connected to chat');
        }
    }
    // --- H·∫æT PH·∫¶N GI·ªÆ NGUY√äN ---

    // --- M·ªöI: H√†m x·ª≠ l√Ω t√¨m ki·∫øm g·ª£i √Ω ---
    async handleSearchSuggestions(query) {
        if (query.length < 3) {
            this.inputBar.clearSuggestions();
            return;
        }
        
        const allFaqs = await window.useFaqData.getFaqs();
        // L·∫•y 3 c√¢u h·ªèi kh·ªõp nh·∫•t t·ª´ hook
        const topFaqs = window.useFaqSearch.findTopFaqs(query, allFaqs, 3);
        
        // G·ªçi h√†m render m·ªõi c·ªßa InputBar
        this.inputBar.renderSuggestions(topFaqs);
    }

    // --- ƒê√É S·ª¨A: Logic c·ªßa handleSendMessage ---
    async handleSendMessage(message) {
        if (!message.trim()) return;
        
        // X√≥a g·ª£i √Ω (n·∫øu c√≤n)
        this.inputBar.clearSuggestions();
        
        this.messageList.addMessage(message, true); 
        this.inputBar.setLoading(true);

        const allFaqs = await window.useFaqData.getFaqs();
        const normalize = window.useFaqSearch.normalizeText;
        const normalizedMessage = normalize(message);

        // 1. Ki·ªÉm tra kh·ªõp ch√≠nh x√°c
        const exactMatch = allFaqs.find(f => normalize(f.question) === normalizedMessage); 

        if (exactMatch) {
            console.log('‚úÖ T√¨m th·∫•y K·∫æT QU·∫¢ CH√çNH X√ÅC:', exactMatch);
            setTimeout(() => {
                this.inputBar.setLoading(false);
                this.addBotMessage(exactMatch.answer); 
            }, 800);
        } else {
            // 2. KH√îNG KH·ªöP: G·ªçi th·∫≥ng Gemini
            // Logic hi·ªÉn th·ªã 3 c√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang handleSearchSuggestions
            console.log('‚ÑπÔ∏è Kh√¥ng kh·ªõp ch√≠nh x√°c. G·ªçi Gemini AI...');
            
            setTimeout(async () => {
                 await this.callGeminiAPI(message); 
            }, 1000); // C√≥ th·ªÉ gi·∫£m th·ªùi gian ch·ªù
        }
    }

    addBotMessage(textOrData) {
        this.messageList.addMessage(textOrData, false);
        if (!this.isOpen) this.showNotification();
    }
    
    showNotification() {
        const notification = document.getElementById('chat-notification');
        if (notification) notification.style.display = 'block';
    }

    hideNotification() {
        const notification = document.getElementById('chat-notification');
        if (notification) notification.style.display = 'none';
    }

    // H√†m g·ªçi Gemini (gi·ªØ nguy√™n)
    async callGeminiAPI(userMessage) {
        this.inputBar.setLoading(true); 
        
        const MODEL_NAME = 'gemini-2.5-pro'; 
        const API_VERSION = 'v1beta'; 
        const API_URL = `https://generativelanguage.googleapis.com/${API_VERSION}/models/${MODEL_NAME}:generateContent?key=${this.GEMINI_API_KEY}`;
        
        const prompt = `B·∫°n l√† tr·ª£ l√Ω ·∫£o cho m·ªôt tr∆∞·ªùng ƒë·∫°i h·ªçc t√™n l√† UniFAQ. 
                       Ng∆∞·ªùi d√πng ƒë√£ h·ªèi m·ªôt c√¢u nh∆∞ng kh√¥ng t√¨m th·∫•y trong c∆° s·ªü d·ªØ li·ªáu FAQ. 
                       H√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa h·ªç m·ªôt c√°ch ng·∫Øn g·ªçn, h·ªØu √≠ch.
                       C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: "${userMessage}"`;
        
        const requestBody = {
            contents: [{
                parts: [{
                    text: prompt 
                }]
            }]
        };

        try {
            const response = await fetch(API_URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestBody),
            });

            const data = await response.json(); 

            if (!response.ok) {
                console.error('L·ªói API! Chi ti·∫øt t·ª´ Google:', data); 
                const errorMessage = data.error?.message || `API request failed with status ${response.status}`;
                throw new Error(errorMessage);
            }
            
            if (!data.candidates || data.candidates.length === 0 || !data.candidates[0].content || !data.candidates[0].content.parts || data.candidates[0].content.parts.length === 0) {
                console.error('L·ªói API: Kh√¥ng c√≥ n·ªôi dung tr·∫£ v·ªÅ', data);
                throw new Error("AI kh√¥ng tr·∫£ v·ªÅ n·ªôi dung.");
            }

            const geminiResponse = data.candidates[0].content.parts[0].text;
            this.addBotMessage(geminiResponse);

        } catch (error) {
            console.error('‚ùå L·ªói g·ªçi Gemini API:', error);
            this.addBotMessage("T√¥i g·∫∑p s·ª± c·ªë khi k·∫øt n·ªëi v·ªõi tr·ª£ l√Ω AI. (L·ªói: " + error.message + ")");
        } finally {
            this.inputBar.setLoading(false); 
        }
    }

    sendMessageFromExternal(text) {
        this.openChat();
        setTimeout(() => {
            this.handleSendMessage(text);
        }, 500);
    }
}