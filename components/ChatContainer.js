// components/ChatContainer.js
class ChatContainer {
    constructor(containerId) {
        this.containerId = containerId;
        this.GEMINI_API_KEY = 'AIzaSyAPHtchMSvtKiJ4HAB8odibdBSQWU6mNsc'; // <-- L·ªñ H·ªîNG B·∫¢O M·∫¨T

        this.state = {
            isOpen: false,
            messages: [],
            isLoading: false,
        };

        // Kh·ªüi t·∫°o Presenter v√† truy·ªÅn state ban ƒë·∫ßu + callbacks ƒë√£ bind
        this.presenter = new ChatPresenter(containerId, {
            initialState: this.state,
            callbacks: {
                onToggleChat: this.toggleChat.bind(this),
                onCloseChat: this.closeChat.bind(this),
                onSendMessage: this.handleSendMessage.bind(this),
                onSearchSuggestions: this.handleSearchSuggestions.bind(this),
                onFaqItemClick: this.handleFaqItemClick.bind(this)
            }
        });
    }

    // H√†m c·∫≠p nh·∫≠t state v√† g·ªçi render c·ªßa Presenter
    setState(newState) {
        this.state = { ...this.state, ...newState };
        this.presenter.render(this.state); // Y√™u c·∫ßu Presenter render l·∫°i
    }

    init() {
        console.log('üöÄ Initializing ChatContainer...');
        // Presenter ƒë√£ t·ª± render DOM ban ƒë·∫ßu, kh√¥ng c·∫ßn g·ªçi render ·ªü ƒë√¢y
        this.connectToSearchBar();
        window.useFaqData.loadFaqs(); // V·∫´n d√πng hook global ƒë·ªÉ load data
        setTimeout(() => {
            this.addBotMessage("Hello! I'm UniFAQ Assistant. How can I help you today?");
        }, 500);
    }

    // --- Logic x·ª≠ l√Ω s·ª± ki·ªán (ƒë∆∞·ª£c g·ªçi b·ªüi Presenter callbacks) ---
    toggleChat() {
        this.setState({ isOpen: !this.state.isOpen });
    }
    openChat() {
        if (!this.state.isOpen) this.setState({ isOpen: true });
    }
    closeChat() {
        if (this.state.isOpen) this.setState({ isOpen: false });
    }
    handleFaqItemClick(question) {
        this.handleSendMessage(question);
    }

    // H√†m th√™m tin nh·∫Øn v√†o state
    addMessage(content, isUser = false) {
        const newMessage = { id: Date.now() + Math.random(), content, isUser, timestamp: new Date() };
        // C·∫≠p nh·∫≠t state messages (t·∫°o m·∫£ng m·ªõi)
        this.setState({ messages: [...this.state.messages, newMessage] });

        if (!isUser && !this.state.isOpen) {
            this.presenter.showNotification(); // Y√™u c·∫ßu Presenter hi·ªÉn th·ªã UI
        }
    }
    addBotMessage(textOrData) {
        this.addMessage(textOrData, false);
    }

    // Logic t√¨m ki·∫øm g·ª£i √Ω
    async handleSearchSuggestions(query) {
        if (query.length < 3) {
            this.presenter.clearSuggestions();
            return;
        }
        try {
            const allFaqs = await window.useFaqData.getFaqs(); // L·∫•y data t·ª´ hook
            const topFaqs = window.useFaqSearch.findTopFaqs(query, allFaqs, 3); // X·ª≠ l√Ω logic t√¨m ki·∫øm
            this.presenter.renderSuggestions(topFaqs); // Y√™u c·∫ßu Presenter hi·ªÉn th·ªã
        } catch (error) {
            console.error("Error fetching FAQs for suggestions:", error);
            this.presenter.clearSuggestions();
        }
    }

    // Logic g·ª≠i tin nh·∫Øn
    async handleSendMessage(message) {
        if (!message.trim()) return;

        this.presenter.clearSuggestions();
        this.addMessage(message, true); // Th√™m tin nh·∫Øn user v√†o state
        this.setState({ isLoading: true }); // B·∫≠t loading

        try {
            const allFaqs = await window.useFaqData.getFaqs();
            const normalize = window.useFaqSearch.normalizeText;
            const normalizedMessage = normalize(message);
            const exactMatch = allFaqs.find(f => normalize(f.question) === normalizedMessage);

            if (exactMatch) {
                console.log('‚úÖ Found exact match:', exactMatch);
                setTimeout(() => {
                    this.addBotMessage(exactMatch.answer);
                    this.setState({ isLoading: false });
                }, 800);
            } else {
                console.log('‚ÑπÔ∏è No exact match. Calling Gemini AI...');
                await this.callGeminiAPI(message); // G·ªçi API (s·∫Ω t·ª± t·∫Øt loading trong finally)
            }
        } catch (error) {
             console.error("Error handling message:", error);
             this.addBotMessage("Sorry, I encountered an error processing your request.");
             this.setState({ isLoading: false }); // T·∫Øt loading n·∫øu c√≥ l·ªói ·ªü ƒë√¢y
        }
    }

    // Logic g·ªçi Gemini API
    async callGeminiAPI(userMessage) { // <--- userMessage is used here
        if (!this.state.isLoading) this.setState({ isLoading: true });

        const MODEL_NAME = 'gemini-2.5-flash';
        const API_VERSION = 'v1beta';
        const API_URL = `https://generativelanguage.googleapis.com/${API_VERSION}/models/${MODEL_NAME}:generateContent?key=${this.GEMINI_API_KEY}`;

        // --- FIX: Include userMessage in the prompt ---
        const prompt = `B·∫°n l√† tr·ª£ l√Ω ·∫£o cho m·ªôt tr∆∞·ªùng ƒë·∫°i h·ªçc t√™n l√† UniFAQ.
                       Ng∆∞·ªùi d√πng ƒë√£ h·ªèi m·ªôt c√¢u nh∆∞ng kh√¥ng t√¨m th·∫•y trong c∆° s·ªü d·ªØ li·ªáu FAQ.
                       H√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa h·ªç m·ªôt c√°ch ng·∫Øn g·ªçn, h·ªØu √≠ch.
                       C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: "${userMessage}"`; // <-- Use userMessage here

        const requestBody = { // <-- requestBody is used below
            contents: [{ parts: [{ text: prompt }] }]
        };

        try {
            const response = await fetch(API_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                // --- FIX: Add requestBody to the fetch body ---
                body: JSON.stringify(requestBody), // <-- Use requestBody here
            });
            const data = await response.json();

            // ... (rest of the try block remains the same) ...
             if (!response.ok) { throw new Error(data.error?.message || `API Error ${response.status}`);}
             if (!data.candidates?.[0]?.content?.parts?.[0]?.text) { throw new Error("AI response empty.");}
             const geminiResponse = data.candidates[0].content.parts[0].text;
             this.addBotMessage(geminiResponse);

        } catch (error) {
            console.error('‚ùå Error calling Gemini API:', error);
            this.addBotMessage("Error connecting to AI assistant. (" + error.message + ")");
        } finally {
            this.setState({ isLoading: false });
        }
    }

    // --- C√°c h√†m ti·ªán √≠ch kh√°c ---
    connectToSearchBar() {
        // ... (Gi·ªØ nguy√™n logic k·∫øt n·ªëi search bar) ...
         const searchInput = document.querySelector('.header__search-input');
         const searchButton = document.querySelector('.header__search-btn');
         if (searchInput && searchButton) {
             const sendQuery = () => {
                 const query = searchInput.value.trim();
                 if (query) {
                     this.openChat();
                     setTimeout(() => this.handleSendMessage(query), 300); // TƒÉng nh·∫π delay
                     searchInput.value = '';
                 }
             };
             searchButton.addEventListener('click', sendQuery);
             searchInput.addEventListener('keypress', (e) => { if (e.key === 'Enter') sendQuery(); });
             console.log('‚úÖ Search bar connected to ChatContainer');
         }
    }

     // H√†m ƒë·ªÉ g·ªçi t·ª´ b√™n ngo√†i
     sendMessageFromExternal(text) {
        this.openChat();
        setTimeout(() => this.handleSendMessage(text), 300);
    }
}